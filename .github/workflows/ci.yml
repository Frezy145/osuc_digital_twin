name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Code Quality Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      if: contains(github.repository, 'python') || contains(github.event.head_commit.message, 'python')
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      if: contains(github.repository, 'python') || contains(github.event.head_commit.message, 'python')
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install flake8 black isort
    
    - name: Lint with flake8
      if: contains(github.repository, 'python') || contains(github.event.head_commit.message, 'python')
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      if: contains(github.repository, 'python') || contains(github.event.head_commit.message, 'python')
      run: black --check --diff .
    
    - name: Check import sorting with isort
      if: contains(github.repository, 'python') || contains(github.event.head_commit.message, 'python')
      run: isort --check-only --diff .

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      if: contains(github.repository, 'python') || contains(github.event.head_commit.message, 'python')
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      if: contains(github.repository, 'python') || contains(github.event.head_commit.message, 'python')
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install pytest pytest-cov
    
    - name: Run tests with pytest
      if: contains(github.repository, 'python') || contains(github.event.head_commit.message, 'python')
      run: |
        if [ -d tests ]; then
          pytest tests/ --cov=src --cov-report=xml --cov-report=html
        else
          echo "No tests directory found, skipping tests"
        fi
    
    - name: Upload coverage reports
      if: contains(github.repository, 'python') || contains(github.event.head_commit.message, 'python')
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  validate-pr:
    runs-on: ubuntu-latest
    name: Validate Pull Request
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check PR title format
      run: |
        echo "PR Title: ${{ github.event.pull_request.title }}"
        # Add custom validation logic here if needed
    
    - name: Check for required files
      run: |
        echo "Checking for required files..."
        ls -la
        
    - name: Validate branch name
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        echo "Branch name: $BRANCH_NAME"
        
        # Check if branch follows naming convention
        if [[ $BRANCH_NAME =~ ^(feature|bugfix|docs|refactor|test)/.+ ]]; then
          echo "✅ Branch name follows convention"
        else
          echo "⚠️ Branch name should follow convention: feature/, bugfix/, docs/, refactor/, or test/"
          echo "Current branch: $BRANCH_NAME"
        fi